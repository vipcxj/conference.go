// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: message.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PatternOp int32

const (
	PatternOp_PATTERN_OP_ALL                    PatternOp = 0
	PatternOp_PATTERN_OP_SOME                   PatternOp = 1
	PatternOp_PATTERN_OP_NONE                   PatternOp = 2
	PatternOp_PATTERN_OP_PUBLISH_ID             PatternOp = 3
	PatternOp_PATTERN_OP_STREAM_ID              PatternOp = 4
	PatternOp_PATTERN_OP_TRACK_ID               PatternOp = 5
	PatternOp_PATTERN_OP_TRACK_RID              PatternOp = 6
	PatternOp_PATTERN_OP_TRACK_LABEL_ALL_MATCH  PatternOp = 7
	PatternOp_PATTERN_OP_TRACK_LABEL_SOME_MATCH PatternOp = 8
	PatternOp_PATTERN_OP_TRACK_LABEL_NONE_MATCH PatternOp = 9
	PatternOp_PATTERN_OP_TRACK_LABEL_ALL_HAS    PatternOp = 10
	PatternOp_PATTERN_OP_TRACK_LABEL_SOME_HAS   PatternOp = 11
	PatternOp_PATTERN_OP_TRACK_LABEL_NONE_HAS   PatternOp = 12
	PatternOp_PATTERN_OP_TRACK_TYPE             PatternOp = 13
)

// Enum value maps for PatternOp.
var (
	PatternOp_name = map[int32]string{
		0:  "PATTERN_OP_ALL",
		1:  "PATTERN_OP_SOME",
		2:  "PATTERN_OP_NONE",
		3:  "PATTERN_OP_PUBLISH_ID",
		4:  "PATTERN_OP_STREAM_ID",
		5:  "PATTERN_OP_TRACK_ID",
		6:  "PATTERN_OP_TRACK_RID",
		7:  "PATTERN_OP_TRACK_LABEL_ALL_MATCH",
		8:  "PATTERN_OP_TRACK_LABEL_SOME_MATCH",
		9:  "PATTERN_OP_TRACK_LABEL_NONE_MATCH",
		10: "PATTERN_OP_TRACK_LABEL_ALL_HAS",
		11: "PATTERN_OP_TRACK_LABEL_SOME_HAS",
		12: "PATTERN_OP_TRACK_LABEL_NONE_HAS",
		13: "PATTERN_OP_TRACK_TYPE",
	}
	PatternOp_value = map[string]int32{
		"PATTERN_OP_ALL":                    0,
		"PATTERN_OP_SOME":                   1,
		"PATTERN_OP_NONE":                   2,
		"PATTERN_OP_PUBLISH_ID":             3,
		"PATTERN_OP_STREAM_ID":              4,
		"PATTERN_OP_TRACK_ID":               5,
		"PATTERN_OP_TRACK_RID":              6,
		"PATTERN_OP_TRACK_LABEL_ALL_MATCH":  7,
		"PATTERN_OP_TRACK_LABEL_SOME_MATCH": 8,
		"PATTERN_OP_TRACK_LABEL_NONE_MATCH": 9,
		"PATTERN_OP_TRACK_LABEL_ALL_HAS":    10,
		"PATTERN_OP_TRACK_LABEL_SOME_HAS":   11,
		"PATTERN_OP_TRACK_LABEL_NONE_HAS":   12,
		"PATTERN_OP_TRACK_TYPE":             13,
	}
)

func (x PatternOp) Enum() *PatternOp {
	p := new(PatternOp)
	*p = x
	return p
}

func (x PatternOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternOp) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (PatternOp) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x PatternOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternOp.Descriptor instead.
func (PatternOp) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

type PublicationPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	 
	Op PatternOp `protobuf:"varint,1,opt,name=op,proto3,enum=cfgo.PatternOp" json:"op,omitempty" mapstructure:"op"`
	 
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" mapstructure:"args"`
	 
	Children []*PublicationPattern `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty" mapstructure:"children"`
}

func (x *PublicationPattern) Reset() {
	*x = PublicationPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationPattern) ProtoMessage() {}

func (x *PublicationPattern) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationPattern.ProtoReflect.Descriptor instead.
func (*PublicationPattern) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *PublicationPattern) GetOp() PatternOp {
	if x != nil {
		return x.Op
	}
	return PatternOp_PATTERN_OP_ALL
}

func (x *PublicationPattern) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *PublicationPattern) GetChildren() []*PublicationPattern {
	if x != nil {
		return x.Children
	}
	return nil
}

type Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	 
	Room string `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty" mapstructure:"room"`
	 
	NodeFrom string `protobuf:"bytes,2,opt,name=nodeFrom,proto3" json:"nodeFrom,omitempty" mapstructure:"nodeFrom"`
	 
	NodeTo string `protobuf:"bytes,3,opt,name=nodeTo,proto3" json:"nodeTo,omitempty" mapstructure:"nodeTo"`
	 
	UserFrom string `protobuf:"bytes,4,opt,name=userFrom,proto3" json:"userFrom,omitempty" mapstructure:"userFrom"`
	 
	UserTo string `protobuf:"bytes,5,opt,name=userTo,proto3" json:"userTo,omitempty" mapstructure:"userTo"`
}

func (x *Router) Reset() {
	*x = Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *Router) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *Router) GetNodeFrom() string {
	if x != nil {
		return x.NodeFrom
	}
	return ""
}

func (x *Router) GetNodeTo() string {
	if x != nil {
		return x.NodeTo
	}
	return ""
}

func (x *Router) GetUserFrom() string {
	if x != nil {
		return x.UserFrom
	}
	return ""
}

func (x *Router) GetUserTo() string {
	if x != nil {
		return x.UserTo
	}
	return ""
}

type WantMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	 
	Router *Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty" mapstructure:"router"`
	 
	ReqTypes []string `protobuf:"bytes,2,rep,name=reqTypes,proto3" json:"reqTypes,omitempty" mapstructure:"reqTypes"`
	 
	Pattern *PublicationPattern `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty" mapstructure:"pattern"`
	 
	TransportId string `protobuf:"bytes,4,opt,name=transportId,proto3" json:"transportId,omitempty" mapstructure:"transportId"`
}

func (x *WantMessage) Reset() {
	*x = WantMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WantMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WantMessage) ProtoMessage() {}

func (x *WantMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WantMessage.ProtoReflect.Descriptor instead.
func (*WantMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *WantMessage) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *WantMessage) GetReqTypes() []string {
	if x != nil {
		return x.ReqTypes
	}
	return nil
}

func (x *WantMessage) GetPattern() *PublicationPattern {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *WantMessage) GetTransportId() string {
	if x != nil {
		return x.TransportId
	}
	return ""
}

// RTCPFeedback signals the connection to use additional RTCP packet types.
// https://draft.ortc.org/#dom-rtcrtcpfeedback
type RTCPFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the type of feedback.
	// see: https://draft.ortc.org/#dom-rtcrtcpfeedback
	// valid: ack, ccm, nack, goog-remb, transport-cc
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" mapstructure:"type"`  
	// The parameter value depends on the type.
	// For example, type="nack" parameter="pli" will send Picture Loss Indicator packets.
	Parameter string `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty" mapstructure:"parameter"`  
}

func (x *RTCPFeedback) Reset() {
	*x = RTCPFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTCPFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTCPFeedback) ProtoMessage() {}

func (x *RTCPFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTCPFeedback.ProtoReflect.Descriptor instead.
func (*RTCPFeedback) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *RTCPFeedback) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RTCPFeedback) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

// RTPCodecCapability provides information about codec capabilities.
//
// https://w3c.github.io/webrtc-pc/#dictionary-rtcrtpcodeccapability-members
// RTPCodecParameters is a sequence containing the media codecs that an RtpSender
// will choose from, as well as entries for RTX, RED and FEC mechanisms. This also
// includes the PayloadType that has been negotiated
//
// https://w3c.github.io/webrtc-pc/#rtcrtpcodecparameters
type RTPCodecParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	 
	MimeType string `protobuf:"bytes,1,opt,name=mimeType,proto3" json:"mimeType,omitempty" mapstructure:"mimeType"`
	 
	ClockRate uint32 `protobuf:"varint,2,opt,name=clockRate,proto3" json:"clockRate,omitempty" mapstructure:"clockRate"`
	 
	Channels uint32 `protobuf:"varint,3,opt,name=channels,proto3" json:"channels,omitempty" mapstructure:"channels"`
	 
	SdpFmtpLine string `protobuf:"bytes,4,opt,name=sdpFmtpLine,proto3" json:"sdpFmtpLine,omitempty" mapstructure:"sdpFmtpLine"`
	 
	RtcpFeedback []*RTCPFeedback `protobuf:"bytes,5,rep,name=rtcpFeedback,proto3" json:"rtcpFeedback,omitempty" mapstructure:"rtcpFeedback"`
	 
	PayloadType uint32 `protobuf:"varint,6,opt,name=payloadType,proto3" json:"payloadType,omitempty" mapstructure:"payloadType"`
}

func (x *RTPCodecParameters) Reset() {
	*x = RTPCodecParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTPCodecParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTPCodecParameters) ProtoMessage() {}

func (x *RTPCodecParameters) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTPCodecParameters.ProtoReflect.Descriptor instead.
func (*RTPCodecParameters) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *RTPCodecParameters) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *RTPCodecParameters) GetClockRate() uint32 {
	if x != nil {
		return x.ClockRate
	}
	return 0
}

func (x *RTPCodecParameters) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *RTPCodecParameters) GetSdpFmtpLine() string {
	if x != nil {
		return x.SdpFmtpLine
	}
	return ""
}

func (x *RTPCodecParameters) GetRtcpFeedback() []*RTCPFeedback {
	if x != nil {
		return x.RtcpFeedback
	}
	return nil
}

func (x *RTPCodecParameters) GetPayloadType() uint32 {
	if x != nil {
		return x.PayloadType
	}
	return 0
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	 
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" mapstructure:"type"`
	 
	PubId string `protobuf:"bytes,2,opt,name=pubId,proto3" json:"pubId,omitempty" mapstructure:"pubId"`
	 
	GlobalId string `protobuf:"bytes,3,opt,name=globalId,proto3" json:"globalId,omitempty" mapstructure:"globalId"`
	// only vaild in local
	 
	LocalId string `protobuf:"bytes,4,opt,name=localId,proto3" json:"localId,omitempty" mapstructure:"localId"`
	// used to bind local and remote track
	 
	BindId string `protobuf:"bytes,5,opt,name=bindId,proto3" json:"bindId,omitempty" mapstructure:"bindId"`
	 
	Rid string `protobuf:"bytes,6,opt,name=rid,proto3" json:"rid,omitempty" mapstructure:"rid"`
	 
	StreamId string `protobuf:"bytes,7,opt,name=streamId,proto3" json:"streamId,omitempty" mapstructure:"streamId"`
	 
	Codec *RTPCodecParameters `protobuf:"bytes,8,opt,name=codec,proto3" json:"codec,omitempty" mapstructure:"codec"`
	 
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" mapstructure:"labels"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *Track) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Track) GetPubId() string {
	if x != nil {
		return x.PubId
	}
	return ""
}

func (x *Track) GetGlobalId() string {
	if x != nil {
		return x.GlobalId
	}
	return ""
}

func (x *Track) GetLocalId() string {
	if x != nil {
		return x.LocalId
	}
	return ""
}

func (x *Track) GetBindId() string {
	if x != nil {
		return x.BindId
	}
	return ""
}

func (x *Track) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *Track) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *Track) GetCodec() *RTPCodecParameters {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *Track) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type StateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	 
	Router *Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty" mapstructure:"router"`
	 
	PubId string `protobuf:"bytes,2,opt,name=pubId,proto3" json:"pubId,omitempty" mapstructure:"pubId"`
	 
	Addr string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty" mapstructure:"addr"`
	 
	Tracks []*Track `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty" mapstructure:"tracks"`
}

func (x *StateMessage) Reset() {
	*x = StateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateMessage) ProtoMessage() {}

func (x *StateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateMessage.ProtoReflect.Descriptor instead.
func (*StateMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *StateMessage) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *StateMessage) GetPubId() string {
	if x != nil {
		return x.PubId
	}
	return ""
}

func (x *StateMessage) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *StateMessage) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type SelectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	 
	Router *Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty" mapstructure:"router"`
	 
	PubId string `protobuf:"bytes,2,opt,name=pubId,proto3" json:"pubId,omitempty" mapstructure:"pubId"`
	 
	TransportId string `protobuf:"bytes,3,opt,name=transportId,proto3" json:"transportId,omitempty" mapstructure:"transportId"`
	 
	Tracks []*Track `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty" mapstructure:"tracks"`
}

func (x *SelectMessage) Reset() {
	*x = SelectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectMessage) ProtoMessage() {}

func (x *SelectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectMessage.ProtoReflect.Descriptor instead.
func (*SelectMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *SelectMessage) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *SelectMessage) GetPubId() string {
	if x != nil {
		return x.PubId
	}
	return ""
}

func (x *SelectMessage) GetTransportId() string {
	if x != nil {
		return x.TransportId
	}
	return ""
}

func (x *SelectMessage) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type UserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	 
	Router *Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty" mapstructure:"router"`
	 
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" mapstructure:"content"`
	 
	MsgId uint32 `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId,omitempty" mapstructure:"msgId"`
}

func (x *UserMessage) Reset() {
	*x = UserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMessage) ProtoMessage() {}

func (x *UserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMessage.ProtoReflect.Descriptor instead.
func (*UserMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *UserMessage) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *UserMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserMessage) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type UserAckMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	 
	Router *Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty" mapstructure:"router"`
	 
	MsgId uint32 `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId,omitempty" mapstructure:"msgId"`
}

func (x *UserAckMessage) Reset() {
	*x = UserAckMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAckMessage) ProtoMessage() {}

func (x *UserAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAckMessage.ProtoReflect.Descriptor instead.
func (*UserAckMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *UserAckMessage) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *UserAckMessage) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x63, 0x66, 0x67, 0x6f, 0x22, 0x7f, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x66, 0x67, 0x6f, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x66, 0x67, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x22, 0xa5, 0x01,
	0x0a, 0x0b, 0x57, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x66, 0x67, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x66, 0x67, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0c, 0x52, 0x54, 0x43, 0x50, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x52, 0x54, 0x50, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x64, 0x70, 0x46, 0x6d, 0x74, 0x70, 0x4c,
	0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x64, 0x70, 0x46, 0x6d,
	0x74, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x74, 0x63, 0x70, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x66, 0x67, 0x6f, 0x2e, 0x52, 0x54, 0x43, 0x50, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x0c, 0x72, 0x74, 0x63, 0x70, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xc9, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x75, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x75, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69,
	0x6e, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x66, 0x67, 0x6f, 0x2e, 0x52, 0x54, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x66, 0x67, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x66, 0x67, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x75, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a,
	0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x63, 0x66, 0x67, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x66, 0x67, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75,
	0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x75, 0x62, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x66, 0x67, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52,
	0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x63, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x66, 0x67, 0x6f, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x66, 0x67, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x2a, 0xae, 0x03, 0x0a, 0x09, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x4f, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x44, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f,
	0x49, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f,
	0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x49, 0x44, 0x10, 0x06, 0x12, 0x24,
	0x0a, 0x20, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41,
	0x43, 0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f,
	0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53,
	0x4f, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x50,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x48, 0x41, 0x53, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x53, 0x4f, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x50,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x10, 0x0c,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0d, 0x42, 0x27, 0x5a, 0x25, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x69, 0x70, 0x63, 0x78, 0x6a,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_message_proto_goTypes = []interface{}{
	(PatternOp)(0),             // 0: cfgo.PatternOp
	(*PublicationPattern)(nil), // 1: cfgo.PublicationPattern
	(*Router)(nil),             // 2: cfgo.Router
	(*WantMessage)(nil),        // 3: cfgo.WantMessage
	(*RTCPFeedback)(nil),       // 4: cfgo.RTCPFeedback
	(*RTPCodecParameters)(nil), // 5: cfgo.RTPCodecParameters
	(*Track)(nil),              // 6: cfgo.Track
	(*StateMessage)(nil),       // 7: cfgo.StateMessage
	(*SelectMessage)(nil),      // 8: cfgo.SelectMessage
	(*UserMessage)(nil),        // 9: cfgo.UserMessage
	(*UserAckMessage)(nil),     // 10: cfgo.UserAckMessage
	nil,                        // 11: cfgo.Track.LabelsEntry
}
var file_message_proto_depIdxs = []int32{
	0,  // 0: cfgo.PublicationPattern.op:type_name -> cfgo.PatternOp
	1,  // 1: cfgo.PublicationPattern.children:type_name -> cfgo.PublicationPattern
	2,  // 2: cfgo.WantMessage.router:type_name -> cfgo.Router
	1,  // 3: cfgo.WantMessage.pattern:type_name -> cfgo.PublicationPattern
	4,  // 4: cfgo.RTPCodecParameters.rtcpFeedback:type_name -> cfgo.RTCPFeedback
	5,  // 5: cfgo.Track.codec:type_name -> cfgo.RTPCodecParameters
	11, // 6: cfgo.Track.labels:type_name -> cfgo.Track.LabelsEntry
	2,  // 7: cfgo.StateMessage.router:type_name -> cfgo.Router
	6,  // 8: cfgo.StateMessage.tracks:type_name -> cfgo.Track
	2,  // 9: cfgo.SelectMessage.router:type_name -> cfgo.Router
	6,  // 10: cfgo.SelectMessage.tracks:type_name -> cfgo.Track
	2,  // 11: cfgo.UserMessage.router:type_name -> cfgo.Router
	2,  // 12: cfgo.UserAckMessage.router:type_name -> cfgo.Router
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WantMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTCPFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTPCodecParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAckMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
